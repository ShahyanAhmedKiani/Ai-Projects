# -*- coding: utf-8 -*-
"""Satelite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Esa2ei5d1k8WGg-L-_TF4hFsdbcR891f

===========================================
#STEP 1: SETUP ENVIRONMENT
===========================================
"""

!pip install -q kaggle rasterio segmentation-models-pytorch opencv-python matplotlib

from google.colab import files
files.upload()  # Upload your kaggle.json

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d akhilchibber/deforestation-detection-dataset
!unzip -q deforestation-detection-dataset.zip -d deforestation_data

"""==========================================
# STEP 2: IMPORT LIBRARIES
===========================================
"""

import os
import numpy as np
import rasterio
import cv2
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import segmentation_models_pytorch as smp
import matplotlib.pyplot as plt

"""==========================================
# STEP 3: DEFINE DATASET
=========================================
"""

class DeforestationDataset(Dataset):
    def __init__(self, image_dir, mask_dir, transform=None):
        self.image_dir = image_dir
        self.mask_dir = mask_dir
        self.image_files = sorted(os.listdir(image_dir))
        self.mask_files = sorted(os.listdir(mask_dir))
        self.transform = transform

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        img_path = os.path.join(self.image_dir, self.image_files[idx])
        mask_path = os.path.join(self.mask_dir, self.mask_files[idx])

        with rasterio.open(img_path) as src:
            image = src.read([1, 2, 3])
            image = np.moveaxis(image, 0, -1)
            image = cv2.resize(image, (256, 256)) / 255.0

        with rasterio.open(mask_path) as src:
            mask = src.read(1)
            mask = cv2.resize(mask, (256, 256))
            mask = (mask > 0).astype(np.uint8)

        image = torch.tensor(image, dtype=torch.float).permute(2, 0, 1)
        mask = torch.tensor(mask, dtype=torch.long)

        return image, mask

"""================================
# STEP 4: LOAD DATA
================================
"""

image_dir = 'deforestation_data/train/images'
mask_dir = 'deforestation_data/train/masks'

dataset = DeforestationDataset(image_dir, mask_dir)
dataloader = DataLoader(dataset, batch_size=2, shuffle=True)

"""=========================================
# STEP 5: DEFINE U-NET
========================================
"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model = smp.Unet(
    encoder_name='resnet34',
    encoder_weights='imagenet',
    in_channels=3,
    classes=2
).to(device)

loss_fn = smp.losses.DiceLoss('multiclass')
optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)

"""=======================================
# STEP 6: TRAINING LOOP
=======================================
"""

def train_model(model, dataloader, optimizer, loss_fn, epochs=5):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for images, masks in dataloader:
            images, masks = images.to(device), masks.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = loss_fn(outputs, masks)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch+1}/{epochs}, Loss: {total_loss / len(dataloader):.4f}")

train_model(model, dataloader, optimizer, loss_fn, epochs=5)

"""=============================================
# STEP 7: VISUALIZE PREDICTIONS
=============================================
"""

def visualize_prediction(image_tensor, pred_mask):
    image = image_tensor.permute(1, 2, 0).numpy()
    mask = torch.argmax(pred_mask.squeeze(0), dim=0).cpu().numpy()

    plt.figure(figsize=(10, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(image)
    plt.title('Satellite Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(mask, cmap='Reds')
    plt.title('Predicted Deforestation')
    plt.axis('off')
    plt.show()
    # Test on one sample
model.eval()
with torch.no_grad():
    sample_image, _ = dataset[0]
    input_tensor = sample_image.unsqueeze(0).to(device)
    output_mask = model(input_tensor)
    visualize_prediction(sample_image.cpu(), output_mask.cpu())